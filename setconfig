#!/bin/bash
# Generate config file and execute server.

error=0

if [ "X${LDAP}" = Xenabled ] ; then
  >&2 echo LDAP is enabled
  if [ "X${LDAPAUTH_URL}" = X ] ; then
    >&2 echo Error: LDAP is enabled, but LDAPAUTH_URL is not defined
    error=1
  fi

  ## Check for conflicting configurations.
  if [[ "${LDAPAUTH_BINDDN}" && "${LDAPAUTH_BINDCREDENTIALS}" ]]; then # using BINDDN to bind to LDAP
    >&2 echo Binds to LDAP will use LDAP_BINDDN and LDAP_BINDCREDENTIALS
    if [ -v LDAPAUTH_BINDDN_PREFIX ] ; then # so LDAPAUTH_BINDDN_PREFIX should not be defined
      >&2 echo Error: Conflicting configurations: LDAPAUTH_BINDDN, LDAPAUTH_BINDCREDENTIALS and LDAPAUTH_BINDDN_PREFIX are all defined.
      exit 0
    fi
    if [ -v LDAPAUTH_BINDDN_SUFFIX ] ; then # so LDAPAUTH_BINDDN_SUFFIX should not be defined
      >&2 echo Error: Conflicting configurations: LDAPAUTH_BINDDN, LDAPAUTH_BINDCREDENTIALS and LDAPAUTH_BINDDN_SUFFIX are all defined.
      exit 0
    fi
  fi
  if [[ -v LDAPAUTH_BINDDN_PREFIX && -v LDAPAUTH_BINDDN_SUFFIX ]]; then # using authenticating user to bind to LDAP
    >&2 echo Binds to LDAP will use distinguished name: LDAP_BINDDN_PREFIX + \<authenticating username\> + LDAP_BINDDN_SUFFIX
    if [ "${LDAPAUTH_BINDDN}" ] ; then # so LDAPAUTH_BINDDN should not be defined
      >&2 echo Error: Conflicting configurations: LDAPAUTH_BINDDN_PREFIX, LDAPAUTH_BINDDN_SUFFIX and LDAPAUTH_BINDDN are all defined.
      exit 0
    fi
    if [ "${LDAPAUTH_BINDCREDENTIALS}" ] ; then # so LDAPAUTH_BINDCREDENTIALS should not be defined
      >&2 echo Error: Conflicting configurations: LDAPAUTH_BIND_PREFIX, LDAPAUTH_BINDDN_SUFFIX and LDAPAUTH_BINDCREDENTIALS are all defined.
      exit 0
    fi
  fi

  ## If LDAPAUTH_BINDDN and LDAPAUTH_BINDCREDENTIALS are defined, then configuring to bind to LDAP using BINDDN.
  ## So make sure if one is defined, then the other is also defined.
  if [[ "${LDAPAUTH_BINDDN}" && -z "${LDAPAUTH_BINDCREDENTIALS}" ]]; then
    >&2 echo Error: LDAPAUTH_BINDDN is defined but LDAPAUTH_BINDCREDENTIALS is unset or empty.
    exit 0
  fi
  if [[ "${LDAPAUTH_BINDCREDENTIALS}" && -z "${LDAPAUTH_BINDDN}" ]]; then
    >&2 echo Error: LDAPAUTH_BINDCREDENTIALS is defined but LDAPAUTH_BINDDN is unset or empty.
    exit 0
  fi

  ## If LDAPAUTH_BINDDN_PREFIX and LDAPAUTH_BINDDN_SUFFIX are defined, then configuring to bind to LDAP using authenticating user.
  ## So make sure if one is defined, then the other is also defined. Both can be empty.
  if [[ -v LDAPAUTH_BINDDN_PREFIX && ! -v LDAPAUTH_BINDDN_SUFFIX ]]; then
    >&2 echo Error: LDAPAUTH_BINDDN_PREFIX is defined but LDAPAUTH_BINDDN_SUFFIX is not.
    exit 0
    fi
  if [[ LDAPAUTH_BINDDN_SUFFIX && ! -v LDAPAUTH_BINDDN_PREFIX ]]; then
    >&2 echo Error: LDAPAUTH_BINDDN_PREFIX is defined but LDAPAUTH_BINDDN_SUFFIX is not.
    exit 0
  fi
  ## Check for conflicting configurations.

  if [ -z "${LDAPAUTH_SEARCHBASE}" ] ; then
    >&2 echo Error: LDAP is enabled, but LDAPAUTH_SEARCHBASE is not defined
    error=1
  fi
  if [ "X${CLIENT_ID}" = X ] ; then
    >&2 echo Error: LDAP is enabled, but CLIENT_ID is not defined
    error=1
  fi
fi

if [ "X${AUTH0DOMAIN}" != X -a "X${CLIENT_ID}" = X ] ; then
   >&2 echo Error: AUTH0DOMAIN is given, but CLIENT_ID is not defined
   error=1
fi

if [ "X${CLIENT_ID}" != X -a "X${CLIENT_SECRET}" = X ] ; then
   >&2 echo Error: CLIENT_ID is given, but CLIENT_SECRET is not defined
   error=1
fi

if [ $error -eq 1 ] ; then
   # Use exit code 0 to prevent container restart.
   exit 0
fi

##### END Error checking

# Redirect following echos to JSON config file.
{

echo "{"

# Output LDAP config if defined.
if [ "X${LDAP}" = Xenabled ] ; then
  >&2 echo LDAP is enabled
  echo '  "ldap": {'
  env | awk '
    BEGIN {
        q="\"";
        # Fix case of config options per https://github.com/vesse/node-ldapauth-fork
        e2j["binddn"] = "bindDn";
        e2j["bindcredentials"] = "bindCredentials";
        e2j["searchbase"] = "searchBase";
        e2j["searchfilter"] = "searchFilter";
        e2j["searchattributes"] = "searchAttributes";
        e2j["bindproperty"] = "bindProperty";
        e2j["searchscope"] = "searchScope";

        e2j["groupsearchbase"] = "groupSearchBase";
        e2j["groupsearchfilter"] = "groupSearchFilter";
        e2j["groupsearchattributes"] = "groupSearchAttributes";
        e2j["groupdnproperty"] = "groupDnProperty";
        e2j["groupsearchscope"] = "groupSearchScope";

        e2j["includeraw"] = "includeRaw";

        e2j["tlsoptions"] = "tlsOptions";
        e2j["socketpath"] = "socketPath";
        e2j["connecttimeout"] = "connectTimeout";
        e2j["idletimeout"] = "idleTimeout";
        e2j["strictdn"] = "strictDN";
        e2j["queuesize"] = "queueSize";
        e2j["queuetimeout"] = "queueTimeout";
        e2j["queuedisable"] = "queueDisable";

        # Override quote for numeric/logical options.
        quote["timeout"] = "";
        quote["connectTimeout"] = "";
        quote["idleTimeout"] = "";
        quote["reconnect"] = "";
        quote["includeRaw"] = "";
        quote["cache"] = "";
        quote["strictDN"] = "";
        quote["queueSize"] = "";
        quote["queueTimeout"] = "";
        quote["queueDisable"] = "";

        # Override quote for list/array options.
        # Example for setting searchAttributes: 
        # If the following is defined in the container .env file:
        #    LDAPAUTH_SEARCHATTRIBUTES=["uid","memberOf"]
        # then the value written to config.json will be
        #    "searchAttributes": ["uid", "memberOf"]
        quote["searchAttributes"] = "";

        # Set defaults.
        def["timeout"] = "5000";
        def["connectTimeout"] = "10000";
        def["reconnect"] = "true";
        def["searchFilter"] = "(CN={{username}})";
        def["searchAttributes"] = "[\"uid\", \"mail\", \"displayName\", \"memberOf\"]";

    }
    /^LDAPAUTH_/ {
        var=tolower($0); sub(/=.*/,"",var); sub(/ldapauth_/,"",var);
        if (e2j[var]) { var = e2j[var]; }
        val=$0; sub(/[^=]*=/,"",val);
        if (var in quote) { vq = quote[var]; } else { vq = q; }
        if (var in def) delete def[var];
        print "    " q var q ": " vq val vq ",";
    }
    END {
        for (var in def) {
            if (var in quote) { vq = quote[var]; } else { vq = q; }
            print "    " q var q ": " vq def[var] vq ",";
        }
    }'
  echo '    "enabled": true'
  if [ "X${CLIENT_ID}" = X ] ; then
    echo '  }'
  else
    echo '  },'
fi
fi

# Output JWT config if defined.
if [ "X${CLIENT_ID}" != X ] ; then
sed -e "s/CLIENT_ID/${CLIENT_ID}/" \
    -e "s/CLIENT_SECRET/${CLIENT_SECRET}/" \
    -e "s/SECRET_BASE64/${SECRET_BASE64:-false}/" \
    -e "s/JWT_TIMEOUT_UNITS/${JWT_TIMEOUT_UNITS:-days}/" \
    -e "s/JWT_TIMEOUT/${JWT_TIMEOUT:-2}/" \
<< HERE
	"jwt": {
                "clientid": "CLIENT_ID",
                "secret": "CLIENT_SECRET",
                "base64": SECRET_BASE64,
                "timeout": JWT_TIMEOUT,
                "timeout_units": "JWT_TIMEOUT_UNITS"
	}
HERE
fi

# If env SSL defined, use SSL
if [ "X${SSL}" != X ] ; then
>&2 echo Using SSL
 echo ' ,
	"ssl": "true"'
fi

echo "}"


# End redirection to config file
} > config/config.json

# If env DEBUG defined, start server in debug mode,
# otherwise start server in normal mode.
#if [ "X${DEBUG}" != X ] ; then
if [ "${DEBUG}" ] ; then
  echo "Starting server in debug mode"
  exec npm run devstart
else
  exec npm start
fi

# Should not happen.  Use exit code 0 to prevent container restart.
exit 0
